//
//  ContentView.swift
//  TravelSchedule
//

import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack {
            Image(systemName: "globe")
                .imageScale(.large)
                .foregroundStyle(.tint)
            
            Text("Hello, world!")
            
            Button("–ó–∞–≥—Ä—É–∑–∏—Ç—å") {
                loadNearestStations()
            }
            .buttonStyle(.borderedProminent)
        }
        .padding()
    }
    
    private func log(_ message: String, emoji: String = "üîπ") {
        print("\(emoji) \(message)")
    }
    
    // MARK: - Network
    private func loadNearestStations() {
        Task {
            let networkService = NetworkService()
            log("–°—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", emoji: "üöÄ")

            do {
                let nearest = try await networkService.getNearestStations(
                    lat: 59.864177,
                    lng: 30.319163,
                    distance: 50
                )
                log("–°—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: \(nearest.stations?.count ?? 0)", emoji: "üìç")

                _ = try await networkService.getStationsList()

                guard let stations = nearest.stations?.filter({ $0.transport_type == "train" }), stations.count >= 2 else {
                    log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞", emoji: "‚ö†Ô∏è")
                    return
                }

                let fromStation = stations[0]

                guard let toStation = stations.first(where: { $0 != fromStation }) else {
                    log("–ù–µ—Ç –æ—Ç–ª–∏—á–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–±—ã—Ç–∏—è", emoji: "‚ö†Ô∏è")
                    return
                }

                log("–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è: \(toStation)", emoji: "üéØ")

                do {
                    _ = try await networkService.getScheduleOnStation(station: fromStation)
                    log("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", emoji: "üìÖ")
                } catch {
                    log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏: \(error)", emoji: "‚ùå")
                }

                if fromStation != toStation {
                    do {
                        let schedule = try await networkService.getScheduleBetweenStations(from: fromStation, to: toStation)
                        log("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", emoji: "üõ§Ô∏è")

                        if let thread = schedule?.segments?.first?.thread, let uid = thread.uid {
                            log("UID –Ω–∏—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: \(uid)", emoji: "üßµ")

                            do {
                                if let thread = schedule?.segments?.first?.thread {
                                    _ = try await networkService.getRouteStations(station: .init(code: uid))

                                    do {
                                        let city = try await networkService.getNearestSettlement(lat: 59.864177, lng: 30.319163)
                                        log("‚úÖ –ë–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: \(city.title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")", emoji: "üèôÔ∏è")

                                        do {
                                            let carrier = try await networkService.getCarrierInfo(code: "TK")
                                            log("‚úÖ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: \(carrier)", emoji: "üöõ")
                                        } catch {
                                            log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ: \(error)", emoji: "‚ùå")
                                        }
                                    } catch {
                                        log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞: \(error)", emoji: "‚ùå")
                                    }

                                } else {
                                    log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç thread", emoji: "‚ö†Ô∏è")
                                }
                            } catch {
                                log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∏—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: \(error)", emoji: "‚ùå")
                            }
                        } else {
                            log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UID –Ω–∏—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞", emoji: "‚ö†Ô∏è")
                        }
                    } catch {
                        log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏: \(error)", emoji: "‚ùå")
                    }
                } else {
                    log("–°—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫", emoji: "‚ö†Ô∏è")
                }

            } catch {
                log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π: \(error)", emoji: "‚ùå")
            }

            do {
                let copyright = try await networkService.getCopyright()
                log("‚úÖ –ö–æ–ø–∏—Ä–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: \(copyright)", emoji: "¬©Ô∏è")
            } catch {
                log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ø–∏—Ä–∞–π—Ç–∞: \(error)", emoji: "‚ùå")
            }
            log("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", emoji: "‚úÖ")
        }
    }
}

#Preview {
    ContentView()
}
