//
//  NetworkService.swift
//  TravelSchedule
//


import OpenAPIRuntime
import OpenAPIURLSession


private func log(_ message: String) {
    print("[TS] \(message)")
}

actor NetworkService {
    private let client: Client
    private let apikey: String

    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init(client: Client = API.shared, apikey: String = API.key) {
        self.client = client
        self.apikey = apikey
        log("üß© NetworkService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }

    // MARK: - –ë–ª–∏–∂–∞–π—à–∏–µ –æ–±—ä–µ–∫—Ç—ã
    func getNearestStations(lat: Double, lng: Double, distance: Int) async throws -> Stations {
        let response = try await client.getNearestStations(query: .init(
            apikey: apikey,
            lat: lat,
            lng: lng,
            distance: distance
        ))
        log("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π...")
        let result = try response.ok.body.json
        log("‚úÖ –°—Ç–∞–Ω—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        log("üî¢ –ö–æ–ª-–≤–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π: \(result.stations?.count ?? 0)")
        return result
    }

    func getNearestSettlement(lat: Double, lng: Double, distance: Int? = nil) async throws -> NearestCity {
        log("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: lat=\(lat), lng=\(lng)")
        let response = try await client.getNearestSettlement(query: .init(
            apikey: apikey,
            lat: lat,
            lng: lng,
            distance: distance,
            lang: "ru_RU",
            format: "json"
        ))
        let result = try response.ok.body.json
        log("‚úÖ –ë–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:")
        log("üèô –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞: \(result.title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")")
        return result
    }

    // MARK: - –†–∞—Å–ø–∏—Å–∞–Ω–∏—è
    func getScheduleOnStation(station: Station, date: String? = nil) async throws -> ScheduleOnStation {
        let code = station.code ?? ""
        log("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏: \(code)")
        let response = try await client.getScheduleOnStation(query: .init(
            apikey: apikey,
            station: code,
            date: date,
            transport_types: nil
        ))
        let result = try response.ok.body.json
        log("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
        log("üìÖ –î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return result
    }

    func getScheduleBetweenStations(from: Station, to: Station, date: String? = nil) async throws -> SchedulePointPoint? {
        let fromCode = from.code ?? ""
        let toCode = to.code ?? ""
        log("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏: \(fromCode) ‚Üí \(toCode)")
        if fromCode == toCode {
            log("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–±—ã—Ç–∏–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏: \(fromCode)")
            return nil
        }
        let response = try await client.getScheduleBetweenStations(query: .init(
            apikey: apikey,
            from: fromCode,
            to: toCode,
            date: date
        ))

        switch response {
        case .ok(let ok):
            let result = try ok.body.json
            log("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
            log("üîÄ –ö–æ–ª-–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏: \(result.segments?.count ?? 0)")
            return result
        default:
            log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏.")
            return nil
        }
    }

    func getRouteStations(station: Station) async throws -> Route {
        let uid = station.code ?? ""
        log("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∏—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å uid: \(uid)")
        let response = try await client.getRouteStations(query: .init(
            apikey: apikey,
            uid: uid
        ))
        let result = try response.ok.body.json
        log("‚úÖ –ù–∏—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        log("üßµ –ù–∏—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞.")
        return result
    }

    // MARK: - –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫ –∏ –∫–æ–ø–∏—Ä–∞–π—Ç
    func getCarrierInfo(code: String) async throws -> Copyright {
        log("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ —Å –∫–æ–¥–æ–º: \(code)")
        let response = try await client.getCarrier(query: .init(
            apikey: apikey,
            code: code,
            format: "json",
            lang: "ru_RU",
            system: "iata"
        ))
        let result = try response.ok.body.json
        log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        return result
    }

    func getStationsList() async throws -> StationsList {
        log("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π (HTML)")
        let response = try await client.getStationsList(
            query: Operations.getStationsList.Input.Query(
                apikey: apikey,
                format: "json",
                lang: "ru_RU"
            )
        )
        let result = try response.ok.body.html
        log("‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (HTML)")
        return result
    }
    
    func getCopyright() async throws -> Copyright {
        log("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ø–∏—Ä–∞–π—Ç–µ –Ø–Ω–¥–µ–∫—Å –†–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        let response = try await client.getCopyright(query: .init(
            apikey: apikey,
            format: "json"
        ))
        let result = try response.ok.body.json
        log("‚úÖ –ö–æ–ø–∏—Ä–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:")
        return result
    }
}
